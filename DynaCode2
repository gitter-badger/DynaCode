--[[

	DynaCode.2
	A complete rebuild of the old framework, which was never actually released. I got bored and a little annoyed at the old
	version, the idea was to make GUIs simple, I felt that they were still too complex, even with DynaCode.
	This is why I created... DynaCode.2
	
	DynaCode is a graphical framework for ComputerCraft, using Views, Controllers and main programs
	Inspired by Javas JavaFX graphical framework.

	DynaCode is used by all HexCode[Harry Felton] programs.

	Copyright Harry Felton (c) HexCode 2015

	To use:
	- Create a stage (window)
	- Set its scene (view/template/layout)
	- Draw

	To make a scene:
	There are two ways of creating a scene, procedurally, or in a CXML (FXML/XML) file.
]]

-- Window objects


-- View utils

-- View template (FXML Style)
--[[

<?DynaCode version="2"?>
<Window name="somewindow">
	<SomeItem x="60%"> [60% of somewindow width (parent)] </SomeItem>
</Window>

Views need to be examined and the information needs to be removed and stored. A class will be used for EACH node in the CXML document.

]]

-- CXML preferences take preference (if set they will simply overwrite procedural settings)
--[[
	--==========--
   Private Defaults
	--==========--
]]

local CCMLCFG = {
	"backgroundColor",
	"textColor",
	"disabledBackgroundColor",
	"disabledTextColor",
	"unfocusedBackgroundColor",
	"unfocusedTextColor"
}

local CCMLObjects = {
	["Window"] = {},
	["Button"] = {
		["x"] = { format = "Number", default=1 },
		["y"] = { format = "Number", default=1},
		["width"] = { format = "Number", default=10},
		["height"] = { format = "Number", default=2},
		["text"] = { format = "String", default="undefined"},
		["toggle"] = { format = "Boolean", default=false},
		["toggleText"] = { format = "String", default="undefined"},
		["toggleTextColor"] = { format = "Color", default=colors.white},
		["toggleBackgroundColor"] = { format = "Color", default=colors.black},
		["toggleState"] = { format = "Boolean", default=false}
	},
	["Text"] = {
		["x"] = { default=1, format = "Number"},
		["y"] = { default=1, format = "Number"},
		["text"] = { default="undefined", format = "String"},
		["width"] = { default=10, format = "Number"},
		["cutoff"] = { default="...", format = "String"}
	},
	["Paragraph"] = {
		["x"] = { default=1, format="Number"},
		["y"] = { default=1, format="Number"},
		["text"] = { default="undefined", format="String"},
		["width"] = { default=10, format="Number"},
		["height"] = { default=2, format="Number"},
		["cutoff"] = { default="...", format="String"}
	},
	["Image"] = {},
	["TextField"] = {},
	["PasswordField"] = {},
	["ReplaceField"] = {},
	["ScrollList"] = {},
	["List"] = {}
}

local defaultSettings = {
	hide = function( self )

	end,
	show = function( self )

	end,
	toggleShow = function( self )

	end,
	enable = function( self )

	end,
	disable = function( self )

	end,
	toggleEnable = function( self )

	end
}
local nodeMethods = {
	remove = function( self )

	end
}
local sceneMethods = {
	addNode = function( self, node )

	end,
	removeNode = function( self, name )

	end,
	removeAllNodes = function( self )

	end,
	addAllNodes = function( self, nodes )

	end,
	loopNodes = function( self, callback )

	end,
	getNode = function( name )

	end
}

--[[
	--==========--
    Private Methods
	--==========--
]]

local function parseargs(s)
	local arg = {}
	string.gsub(s, "([%-%w]+)=([\"'])(.-)%2", function (w, _, a)
		arg[w] = a
	end)
	return arg
end

local function collect(s)
	local stack = {}
	local top = {}
	table.insert(stack, top)
	local ni,c,label,xarg, empty
	local i, j, str = 1, 1, false
	while true do
		ni,j,c,label,xarg, empty = string.find(s, "<(%/?)([%w:]+)(.-)(%/?)>", i)
		if not ni then break end
		local text = string.sub(s, i, ni-1)
		if not string.find(text, "^%s*$") then
			str = text
			--table.insert(top, { content = text })
		end
		if empty == "/" then  -- empty element tag
			local tbl = {
				label=label, 
				xarg=parseargs(xarg), 
				empty=1
			}
			if str then
				tbl["content"] = str
			end
			table.insert(top, tbl)
			str = false
		elseif c == "" then   -- start tag
			top = {label=label, xarg=parseargs(xarg)}
			if str then
				top["content"] = str
			end
			table.insert(stack, top)   -- new level
			str = false
		else  -- end tag
			local toclose = table.remove(stack)  -- remove top
			top = stack[#stack]
			if #stack < 1 then
				return false, ("No opening tag for: "..label)
			end
			if toclose.label ~= label then
				return false, ("Cannot close "..toclose.label.." with "..label)
			end
			if str then
				toclose["content"] = str
			end
			table.insert(top, toclose)
			str = false
		end
		i = j+1
	end
	local text = string.sub(s, i)
	if not string.find(text, "^%s*$") then
		table.insert(stack[#stack], text)
	end
	if #stack > 1 then
		return false, ("No closing tag for: "..stack[#stack].label)
	end
	return stack[1]
end

local function checkRequirements( given, required, silent )
	if not given or type(given) ~= "table" then
		error("Options of type table expected to create node, got "..type(given).." instead. Cannot pass node.")
	end
	local r = required
	local function compile( prefix )
		local msg = prefix or ""
		for k, v in ipairs(r) do
			msg = msg..tostring(v)
			if k < #r then msg = msg .. "," end
		end
		return msg
	end
	for opt in pairs( given ) do
		for key, value in ipairs( r ) do
			if value == opt then
				table.remove( r, key )
			end
		end
	end
	if #r <= 0 then return true 
	elseif not silent then
		error( compile("Missing requirements to create node: \n") )
	else
		return false, compile("")
	end
end

local function copy( tbl )
	if type( tbl ) == "table" then
		-- loop through table, copying keys
		local copy = {}
		for key, value in ipairs(tbl) do
			copy[key] = value
		end
		return copy
	else
		return tbl
	end
end


function clone( options )
	-- Create a new copy of DynaCode, this is to be used practically
	local ok, err = checkRequirements( options, {
		"instanceName"
	}, true)
	local defaults = {}
	if not ok and err then
		error("Cannot create clone, missing: "..tostring( err ))
	end
	local clone = {}
	local instance = {}
	instance.loggingReady = false
	setmetatable( instance, {__index=clone})
	setmetatable( clone, {__index=options})
	setmetatable( options, {__index=defaults})


	local function log( mode, msg )
		if instance.loggingReady then
			local prefix = "Info"
			if mode == "w" then prefix = "Warn" elseif mode == "e" then prefix = "ERROR" end
			clone.file.append( instance.loggingPath, "["..prefix.."] "..msg.."\n")
		end
	end


	--[[
		--==========--
	  	Stage & Scenes
		--==========--
	]]

	clone.stage = {
		-- Window
		new = function( options )
			checkRequirements(options, {"name"})
			local defaults = {
				windowed = false,
			}

			-- A stage represents a window, nodes (elements) can be added to this window and are subject to its terms.
			--[[
				@return table
			]]
			local settings = {} --settings are now private and must be accessed via methods.
			local function draw()
				-- Clear the area using the backgroundColor. Then loop each node and call its draw function (node.draw)
			end
			local function loop()
				-- Each stage has an event loop. Any events fired will only affect the current stage (last clicked)
				-- this loop must ONLY be running if the stage is ACTIVE. When unfocused this loop must be interrupted using event "break_stage_inactive"
				-- To break one loop use "break_stage_<STAGE.NAME>"
				while true do
					local e, p1, p2, p3, p4, p5, p6 = os.pullEventRaw()
					if e == "break_stage_"..settings.name then
						print("Broken "..settings.name)
						break
					elseif e == "break_stage_inactive" then
						-- is this stage inactive? if so, break the loop
						if not settings.active then break end
					end
				end
			end
			setmetatable( settings, {__index=options} )
			setmetatable( options, {__index=defaults} )
			new = {}
			new.setBackgroundColor = function( bg, r ) settings.backgroundColor = bg if not r then draw() end end
			new.getBackgroundColor = function() return settings.backgroundColor end
			new.setTextColor = function( tc, r ) settings.textColor = tc if not r then draw() end end
			new.getTextColor = function() return settings.textColor end
			new.setScene = function( scene ) settings.scene = scene draw() end
			new.getScene = function() return settings.scene end
			new.getEnable = function() return settings.enabled end
			new.setEnable = function( e, r ) settings.enabled = e if not r then draw() end end
			new.setVisible = function() end
			new.getVisible = function() end
			new.draw = function() draw() end
			new.createTimer = function( name, duration, method, rep )
				settings.timers = settings.timers or {}

				settings.timers[ os.startTimer( duration ) ] = {
					duration = duration,
					oncomplete = method,
					rp = rep,
					name = name,
					status = {
						running = false,
						startedWhen = false
					},
					parent = settings.name -- Only the caller stage responds. If the stage is removed the timer won't be resolved, therefore stage.removeAllTimers() should be called before removing the stage.
				}
			end
			new.stopTimer = function( name )

			end
			new.getName = function() return settings.name end
			new.start = function() print("started "..settings.name) loop() end
			new.stop = function() os.queueEvent("break_stage_"..tostring(settings.name)) end
			return new
		end
	}

	clone.scene = {
		-- view. Store nodes in [structure] field of scene object
		load = function( path )
			--[[
				- Open path
				- Load file
				- Read File
				- Find Node tags (<nodeName> </nodeName>)
				- Store these Node tags in a table
				- Loop each node tag, create the node and apply its settings.
				- Return the new scene (including methods).
			]]
			local newScene = {}
			setmetatable( newScene, {__index=sceneMethods})
			local fileContent = file.getAll( path )
			if not fileContent then error("Cannot find CCML file "..tostring( path )) end
			local CCML, err = collect( fileContent )
			local structure = {}
			if CCML then
				-- Loop each node, then loop within it and so on. Compile a list of all nodes.
			else
				error( err or "Could not parse CCML file" )
			end
			-- CCML contains each XML tag and its content. We need to assign a "parent" to each one
		end,
		create = function()
			-- returns blank scene for build using procedural code.
			new = {}
			setmetatable( new, {__index=sceneMethods})
			return new
		end
	}

	--[[
		--==========--
    Miscellaneous Utilities
		--==========--
	]]

	clone.file = {
		getHandle = function( path, mode )
			if fs.exists( path ) then
				return fs.open( path, mode or "r" )
			else
				return false
			end
		end,
		write = function( path, content )
			local h = clone.file.getHandle( path, "w" )
			if h then
				h.write( content )
				h.close()
				return true
			else
				return false
			end
		end,
		append = function( path, content )
			local h = clone.file.getHandle( path, "a" )
			if h then
				h.write( content )
				h.close()
				return true
			else
				return false
			end
		end,
		writeLine = function( path, content )
			local h = clone.file.getHandle( path, "r" )
			if h then
				h.writeLine( content )
				h.close()
				return true
			else
				return false
			end
		end,
		getLine = function( path )
			local h = clone.file.getHandle( path, "r" )
			if h then
				local cnt = h.readLine()
				h.close()
				return cnt
			else
				return false
			end
		end,
		getAll = function( path )
			local h = clone.file.getHandle( path, "r" )
			if h then
				local cnt = h.readAll()
				h.close()
				return cnt
			else
				return false
			end
		end
	}
	wireless = {
		-- RedNet
	}

	remote = {
		-- HTTP
	}

	redstone = {
		
	}

	monitor = {
		
	}

	peripheral = {
		
	}

	clone.group = {
		
	}


	--[[
		--==========--
	  Node Declarations
		--==========--
	]]

	clone.button = function()
		local new = {}
		new.draw = function()

		end
	end

	clone.textInput = function()
		
	end

	clone.scrollList = function()
		
	end

	clone.list = function()
		
	end

	--[[
		--==========--
	   Logging Methods
		--==========--
	]]

	clone.setLogging = function( v )
		instance.logging = v
	end

	clone.getLogging = function( v )
		return instance.logging
	end

	clone.getLog = function( v )
		-- Open the log file and return its contents.
		return clone.file.getAll( instance.loggingPath )
	end

	clone.setLoggingPath = function( v )
		instance.loggingPath = v
	end

	clone.getLoggingPath = function()
		return instance.loggingPath
	end

	clone.logToFile = function( mode, message )
		log( mode, message )
	end

	clone.initializeLogging = function()
		if not instance.logging or not instance.loggingPath then
			error("Set logging and logging path before initializing")
		end
		local h = fs.open( instance.loggingPath, "w" )
		if h then
			h.write("--@@==== DynaCode Logging - Instance: "..instance.instanceName.." ====@@--\n")
			h.close()
			instance.loggingReady = true
		else
			error("Failed to create file handle for path: "..tostring( instance.loggingPath ))
		end
	end

	return clone
end